load("C:/Users/Emil/datascienceFloHub/cellline_datasets.rda")
load("C:/Users/Emil/datascienceFloHub/prism_datasets.rda")
knitr::opts_chunk$set(echo = TRUE)
load("/Users/moritzcarlonaeumann/Library/Mobile Documents/com~apple~CloudDocs/Studium/Semester/Semester 4 alles/Bioinfo 4/prism_datasets.rda")
dim(prism)
ncol(prism)
nrow(prism)
colnames(prism[,1:3])
rownames(prism[1:3,])
knitr::opts_chunk$set(echo = TRUE)
prism.dim <- dim(prism); prism.achilles.dim <- dim(prism.achilles); prism.cl.dim <- dim(prism.cl); prism.cnv.dim <- dim(prism.cnv); prism.exp.dim <- dim(prism.exp); prism.snv.dim <- dim(prism.snv); prism.treat.dim <- dim(prism.treat)
prism.cl[1, 1:41]
prism.cl[1:3, 20]
prism.cl[1:3, 6]
a <- c(which(prism.cl[, 20] == "Pancreatic Cancer"), which (prism.cl[, 6] == "Pancreatic Cancer"))
a
length(a)
prism.cl[1, 1:41]
prism.cl[1:3, 20]
prism.cl[1:3, 6]
a <- c(which(prism.cl[, 20] == "Pancreatic Cancer"), which (prism.cl[, 6] == "Pancreatic Cancer"))
a
length(a)
knitr::opts_chunk$set(echo = TRUE)
load("../../InformaticsProjectData/prism_datasets.rda")
load("../../InformaticsProjectData/prism_datasets.rda")
load("../../InformaticsProjectData/cellline_datasets.rda")
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
Pancreatic.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(Pancreatic.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pancreatic = prism.exp[Pancreatic.cl.Vector,]
# to keep it clean
rm(cl.metadata.exp)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
Pancreatic.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(Pancreatic.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pancreatic = prism.exp[Pancreatic.cl.Vector,]
exressionNAcheck = is.na(prism.exp.pancreatic)
str(expressionNAcheck)
View(exressionNAcheck)
rm(exressionNAcheck)
expressionNAcheck = is.na(prism.exp.pancreatic)
str(expressionNAcheck)
expressionNAcheck = is.na(prism.exp.pancreatic)
summary(expressionNAcheck)
expressionNAcheck = is.na(prism.exp.pancreatic)
sum(expressionNAcheck)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
expressionNAcheck = is.na(prism.exp.pan)
sum(expressionNAcheck)
#depmap IDs of primary pancreatic cell lines
primary.pan.cl.df = subset(cl.metadata.exp, primary_or_metastasis == "Primary" )
primary.pan.cl.Vector = primary.pan.cl.df[,1]
#depmap IDs of metastasic pancreatic cell lines
metastasis.pan.cl.df = subset(cl.metadata.exp, primary_or_metastasis == "Metastasis" )
metastasis.pan.cl.Vector = metastasis.pan.cl.df[,1]
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
prism.exp.pan.Z = scale(prism.exp.pan)
View(prism.exp.pan.Z)
View(prism.exp.pan.Z)
