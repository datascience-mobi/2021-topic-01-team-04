{
wil = c(wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value)
p.vector = append(p.vector, wil)
}
print(p.vector)
h = c(1, 2, 3, 4, 5)
j = h < 4
j
j = h <= 4
j
dim(prism.exp.pan)
ncol(prism.exp.pan)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
#for(i in 3)
#{
#  p.vector = numeric()
#  new.val = wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value
#  p.vector = c(p.vector, new.val)
#  }
#print(p.vector)
alpha = 0.05
p.vector = vector()
for(i in 1:ncol(prism.exp.pan))
{
wil = c(wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value)
p.vector = append(p.vector, wil)
}
boolean.p.vector = p.vector <= alpha
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.1
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.2
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.3
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.4
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.5
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.6
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.7
boolean.p.vector = p.vector <= alpha
sum(boolean.p.vector)
sum(boolean.p.vector)
?levels
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.7
boolean.p.vector = p.vector <= alpha
factor(boolean.p.vector)
levels(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.7
boolean.p.vector = p.vector <= alpha
factor(boolean.p.vector)
summary(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.7
boolean.p.vector = p.vector <= alpha
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
summary(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
alpha = 0.05
boolean.p.vector = p.vector <= alpha
summary(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
expressionNAcheck = is.na(prism.exp.pan)
summary(expressionNAcheck)
rm(expressionNAcheck)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
expressionNAcheck = is.na(prism.exp.pan)
View(expressionNAcheck)
?sum
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
expressionNAcheck = is.na(prism.exp.pan)
sum(expressionNAcheck)
k = c(F, F, T, NA)
l = k == NA
l
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
k = c(F, F, T, NA)
k[is.na(k)] = FALSE
k
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
boolean.p.vector[is.na(boolean.p.vector)] = FALSE
summary(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
interesting.genes = colnames(prism.exp.pan)
dim(interesting.genes)
length(interesting.genes)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
interesting.genes = colnames(prism.exp.pan[,boolean.p.vector])
length(interesting.genes)
view(boolean.p.vector)
View(boolean.p.vector)
which(is.na(boolean.p.vector))
which(is.na(boolean.p.vector[1:10000]))
which(is.na(boolean.p.vector[10000:length(boolean.p.vector)]))
is.na(boolean.p.vector[1:length(boolean.p.vector)])
u = is.na(boolean.p.vector[1:length(boolean.p.vector)])
summary(u)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
## Creating a prism.exp data frame without pancreatic cell lines
#zuerst umständlich mit einer selbst geschriebenen Funktion versucht. Gemerkt, dass der Operator %in% genau diesselbe Aufgabe bewältigt.
prism.exp.nopan = prism.exp[!row.names(prism.exp)%in%pan.cl.Vector,]
## selecting 33 cell lines radomly and putting them in a new data frame
# (zuerst mit rownames vektor versucht, sample function erlaubte allerdings keine Vektoren, welche aus character bestanden)
random.prism.exp = prism.exp.nopan[(sample(nrow(prism.exp.nopan), 33)),]
#for(i in 3)
#{
#  p.vector = numeric()
#  new.val = wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value
#  p.vector = c(p.vector, new.val)
#  }
#print(p.vector)
p.vector = vector()
for(i in 1:ncol(prism.exp.pan))
{
wil = c(wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value)
p.vector = append(p.vector, wil)
}
alpha = 0.05
boolean.p.vector = p.vector <= alpha
summary(boolean.p.vector)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
expressionNAcheck = is.na(prism.exp)
sum(expressionNAcheck)
View(expressionNAcheck)
View(expressionNAcheck)
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
sum(apply(expressionNAcheck, 2, sum))
?apply
class(random.prism.exp)
for(i in 1:3){print("yo")}
View(interesting.genes)
k = c("as", "we", "rt", "df")
k[!"as"]
k[-"as"]
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
interesting.genes()
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
interesting.genes = vector()
q = 10
alpha = 0.05
for(g in 1:q)
{
p.vector = vector()
random.prism.exp = prism.exp.nopan[(sample(nrow(prism.exp.nopan), 33)),]
for(i in 1:ncol(prism.exp.pan))
{
wil = c(wilcox.test(prism.exp.pan[,i], random.prism.exp[,i], exact = FALSE)$p.value)
p.vector = append(p.vector, wil)
}
boolean.p.vector = p.vector <= alpha
boolean.p.vector[is.na(boolean.p.vector)] = FALSE
interesting.genes = append(interesting.genes, colnames(prism.exp.pan[,boolean.p.vector]))
}
knitr::opts_chunk$set(echo = TRUE)
# to get an approximate overview
str(prism.exp)
# In order to extract the desired cell lines, we need the Depmap IDs of the desired pancreatic cancer celllines. We get the desired Depmap ID's using the prism.cl data set and the subset function. The subset function returns rows of a data frame, which meet the desired condition. We save the reduced prism.cl data set as the cl.metadata.exp variable.
cl.metadata.exp = subset(prism.cl, Type_for_Manuscript == "Pancreatic" )
# Using the previously created data frame, we extract the first column, which contains DepmapID's, and assign them to the Pancreatic.cl.vector. This vector contains Depmap ID's of all pancreatic cancer cell lines in our dataset.
pan.cl.Vector = cl.metadata.exp[,1]
# There are 33 pancreatic cancer cellines
length(pan.cl.Vector)
# Because the rownames of prism.exp are DepmapID's, it is now possible to reduce the prism.exp dataset to the desired cell lines.
prism.exp.pan = prism.exp[pan.cl.Vector,]
###     !!! please note, that you can reach a function package including a function to extract pancreatic cancer data points from any of the cell line * x data frames.
###     !!! the package can be loaded through:  "source("Scripts/Functions.R")" with a working directory of the git rep (can be checked via:  "getwd()")
table.interesting.genes = table(interesting.genes)
df.interesting.genes = as.data.frame(table.interesting.genes)
View(df.interesting.genes)
View(df.interesting.genes)
knitr::opts_chunk$set(echo = TRUE)
source("Scripts/Initiator.R")
knitr::opts_chunk$set(echo = TRUE)
source("Scripts/Initiator.R")
hist(apply(df.NA.to.val(prism.clean, 2, "median"), 2, mean), breaks=20, main="Drug Efficacy across Pancreatic Cancer Cell Lines", xlab="Mean Logfold Drug Effect on Cell Growth", ylab="Number of Drugs")
#ef.caller(threshold = c(-7.3, -7, -7, -8, -7.5, -7.5), greaterthan = F, addat = c("prism.clean", "pancan.clean"))
ef.dr.identifier(prism.clean, -7.3, F)
ef.dr.identifier(pancan.clean, -7, F)
ef.dr.identifier(get(st.split.vars[1]), -7, F)
ef.dr.identifier(get(st.split.vars[2]), -8, F)
ef.dr.identifier(get(st.split.vars[3]), -7.5, F)
ef.dr.identifier(get(st.split.vars[4]), -7.5, F)
